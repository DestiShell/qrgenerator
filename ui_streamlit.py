import streamlit as st
from generator import generate_qr_to_bytes
from encryptor import encrypt, save_key
import os
from datetime import datetime
import base64


def generate_wifi_config(ssid: str, password: str, security: str = 'WPA') -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WiFi –¥–ª—è QR-–∫–æ–¥–∞"""
    return f"WIFI:T:{security};S:{ssid};P:{password};;"


def generate_vcard(name: str, phone: str, email: str = None, org: str = None) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç vCard –¥–ª—è QR-–∫–æ–¥–∞"""
    vcard = f"BEGIN:VCARD\nVERSION:3.0\nFN:{name}\nTEL:{phone}"
    if email:
        vcard += f"\nEMAIL:{email}"
    if org:
        vcard += f"\nORG:{org}"
    vcard += "\nEND:VCARD"
    return vcard


def get_image_download_link(img_bytes, filename):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    b64 = base64.b64encode(img_bytes).decode()
    return f'<a href="data:image/png;base64,{b64}" download="{filename}">–°–∫–∞—á–∞—Ç—å QR-–∫–æ–¥</a>'


def main():
    st.set_page_config(page_title="QRForge", page_icon="üî≥", layout="centered")
    st.title("üî≥ QRForge - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤")

    # –°–∞–π–¥–±–∞—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ QR-–∫–æ–¥–∞")

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = st.selectbox(
            "–¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ",
            ["–¢–µ–∫—Å—Ç", "URL", "WiFi", "vCard"],
            index=0
        )

        # –¶–≤–µ—Ç–∞
        col1, col2 = st.columns(2)
        with col1:
            color = st.color_picker("–¶–≤–µ—Ç QR-–∫–æ–¥–∞", "#000000")
        with col2:
            bg_color = st.color_picker("–¶–≤–µ—Ç —Ñ–æ–Ω–∞", "#FFFFFF")

        # –ì—Ä–∞–¥–∏–µ–Ω—Ç
        use_gradient = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç")
        if use_gradient:
            col1, col2 = st.columns(2)
            with col1:
                gradient_start = st.color_picker("–ù–∞—á–∞–ª–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞", "#833AB4")
            with col2:
                gradient_end = st.color_picker("–ö–æ–Ω–µ—Ü –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞", "#FD1D1D")
            gradient = (gradient_start, gradient_end)
        else:
            gradient = None

        # –†–∞–∑–º–µ—Ä –∏ –≥—Ä–∞–Ω–∏—Ü–∞
        size = st.slider("–†–∞–∑–º–µ—Ä", 5, 20, 10)
        border = st.slider("–ì—Ä–∞–Ω–∏—Ü–∞", 1, 10, 4)

        # –°—Ç–∏–ª—å
        style = st.selectbox(
            "–°—Ç–∏–ª—å",
            ["–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", "Instagram", "Telegram", "–¢–µ–º–Ω—ã–π",
             "–ù–µ–æ–Ω–æ–≤—ã–π", "–í–∏–Ω—Ç–∞–∂–Ω—ã–π", "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º", "–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π",
             "–ê–∫–≤–∞—Ä–µ–ª—å", "–ö–∏–±–µ—Ä–ø–∞–Ω–∫", "–ü–∞—Å—Ç–µ–ª—å–Ω—ã–π"],
            index=0
        )
        style_map = {
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é": "default",
            "Instagram": "instagram",
            "Telegram": "telegram",
            "–¢–µ–º–Ω—ã–π": "dark",
            "–ù–µ–æ–Ω–æ–≤—ã–π": "neon",
            "–í–∏–Ω—Ç–∞–∂–Ω—ã–π": "vintage",
            "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º": "minimal",
            "–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π": "abstract",
            "–ê–∫–≤–∞—Ä–µ–ª—å": "watercolor",
            "–ö–∏–±–µ—Ä–ø–∞–Ω–∫": "cyber",
            "–ü–∞—Å—Ç–µ–ª—å–Ω—ã–π": "pastel"
        }

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏")
        col1, col2 = st.columns(2)
        with col1:
            corner_style = st.selectbox(
                "–°—Ç–∏–ª—å —É–≥–ª–æ–≤",
                ["–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ", "–ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ", "–ó–∞–æ—Å—Ç—Ä–µ–Ω–Ω—ã–µ", "–ö—Ä—É–≥–ª—ã–µ"],
                index=0
            )
            corner_style_map = {
                "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ": "square",
                "–ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ": "rounded",
                "–ó–∞–æ—Å—Ç—Ä–µ–Ω–Ω—ã–µ": "pointed",
                "–ö—Ä—É–≥–ª—ã–µ": "circle"
            }
        with col2:
            dot_style = st.selectbox(
                "–°—Ç–∏–ª—å —Ç–æ—á–µ–∫",
                ["–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ", "–ö—Ä—É–≥–ª—ã–µ", "–ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ", "–†–æ–º–±—ã"],
                index=0
            )
            dot_style_map = {
                "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ": "square",
                "–ö—Ä—É–≥–ª—ã–µ": "circle",
                "–ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ": "rounded",
                "–†–æ–º–±—ã": "diamond"
            }

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
        pattern = st.selectbox(
            "–ü–∞—Ç—Ç–µ—Ä–Ω",
            ["–ù–µ—Ç", "–¢–æ—á–∫–∏", "–ö—Ä—É–≥–∏", "–†–æ–º–±—ã", "–ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ", "–ê–∫–≤–∞—Ä–µ–ª—å", "–ö–∏–±–µ—Ä"],
            index=0
        )
        pattern_map = {
            "–ù–µ—Ç": None,
            "–¢–æ—á–∫–∏": "dots",
            "–ö—Ä—É–≥–∏": "circles",
            "–†–æ–º–±—ã": "diamonds",
            "–ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ": "rounded",
            "–ê–∫–≤–∞—Ä–µ–ª—å": "watercolor",
            "–ö–∏–±–µ—Ä": "cyber"
        }

        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        encrypt_data = st.checkbox("–®–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        if encrypt_data:
            key = st.text_input("–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)")

    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
    with st.form("qr_form"):
        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if content_type == "–¢–µ–∫—Å—Ç":
            content = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç", "Hello, World!")
        elif content_type == "URL":
            content = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL", "https://example.com")
            if not content.startswith(('http://', 'https://')):
                content = f"https://{content}"
        elif content_type == "WiFi":
            col1, col2 = st.columns(2)
            with col1:
                ssid = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ (SSID)")
            with col2:
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            content = generate_wifi_config(ssid, password)
        elif content_type == "vCard":
            col1, col2 = st.columns(2)
            with col1:
                name = st.text_input("–ò–º—è")
                phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
            with col2:
                email = st.text_input("Email")
                org = st.text_input("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
            content = generate_vcard(name, phone, email, org)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
        logo_file = st.file_uploader("–õ–æ–≥–æ—Ç–∏–ø (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", type=["png", "jpg", "jpeg"])

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        submitted = st.form_submit_button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    if submitted:
        if (content_type == "WiFi" and (not ssid or not password)) or \
                (content_type == "vCard" and (not name or not phone)):
            st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            return

        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        encryption_key = None
        if encrypt_data:
            try:
                content, encryption_key = encrypt(content, key if key else None)
                if not key:
                    save_key(encryption_key)
                    st.success("–¢–µ–∫—Å—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ key.txt")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
                return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        try:
            logo_path = None
            if logo_file:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                logo_path = f"temp_logo.{logo_file.name.split('.')[-1]}"
                with open(logo_path, "wb") as f:
                    f.write(logo_file.getbuffer())

            qr_img = generate_qr_to_bytes(
                text=content,
                logo_path=logo_path,
                color=color,
                bg_color=bg_color,
                size=size,
                border=border,
                style=style_map[style],
                gradient=gradient,
                pattern=pattern_map[pattern],
                corner_style=corner_style_map[corner_style],
                dot_style=dot_style_map[dot_style]
            )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–æ—Ç–∏–ø–∞ –µ—Å–ª–∏ –±—ã–ª
            if logo_file and os.path.exists(logo_path):
                os.remove(logo_path)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.image(qr_img, caption="–í–∞—à QR-–∫–æ–¥", use_column_width=True)

            # –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"qr_{timestamp}.png"
            st.markdown(get_image_download_link(qr_img, filename), unsafe_allow_html=True)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {str(e)}")


if __name__ == "__main__":
    main()